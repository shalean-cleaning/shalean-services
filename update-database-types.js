#!/usr/bin/env node

/**
 * Update Database Types Script
 * 
 * This script updates the database types to match the current schema
 */

const fs = require('fs');
const path = require('path');

console.log('ðŸ”§ Updating database types...\n');

const databaseTypesPath = 'src/lib/database.types.ts';
const updatedTypes = `// This file was auto-generated by Supabase CLI.
// Do not edit this file manually.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      bookings: {
        Row: {
          id: string
          customer_id: string | null
          session_id: string | null
          cleaner_id: string | null
          area_id: string | null
          service_id: string | null
          service_slug: string | null
          region_id: string | null
          booking_date: string | null
          start_time: string | null
          end_time: string | null
          start_ts: string | null
          end_ts: string | null
          status: 'DRAFT' | 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED' | 'READY_FOR_PAYMENT'
          total_price: number | null
          notes: string | null
          special_instructions: string | null
          auto_assign: boolean | null
          address: string | null
          postcode: string | null
          bedrooms: number | null
          bathrooms: number | null
          paystack_ref: string | null
          paystack_status: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          customer_id?: string | null
          session_id?: string | null
          cleaner_id?: string | null
          area_id?: string | null
          service_id?: string | null
          service_slug?: string | null
          region_id?: string | null
          booking_date?: string | null
          start_time?: string | null
          end_time?: string | null
          start_ts?: string | null
          end_ts?: string | null
          status?: 'DRAFT' | 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED' | 'READY_FOR_PAYMENT'
          total_price?: number | null
          notes?: string | null
          special_instructions?: string | null
          auto_assign?: boolean | null
          address?: string | null
          postcode?: string | null
          bedrooms?: number | null
          bathrooms?: number | null
          paystack_ref?: string | null
          paystack_status?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          customer_id?: string | null
          session_id?: string | null
          cleaner_id?: string | null
          area_id?: string | null
          service_id?: string | null
          service_slug?: string | null
          region_id?: string | null
          booking_date?: string | null
          start_time?: string | null
          end_time?: string | null
          start_ts?: string | null
          end_ts?: string | null
          status?: 'DRAFT' | 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED' | 'READY_FOR_PAYMENT'
          total_price?: number | null
          notes?: string | null
          special_instructions?: string | null
          auto_assign?: boolean | null
          address?: string | null
          postcode?: string | null
          bedrooms?: number | null
          bathrooms?: number | null
          paystack_ref?: string | null
          paystack_status?: string | null
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "bookings_area_id_fkey"
            columns: ["area_id"]
            isOneToOne: false
            referencedRelation: "suburbs"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "bookings_cleaner_id_fkey"
            columns: ["cleaner_id"]
            isOneToOne: false
            referencedRelation: "cleaners"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "bookings_customer_id_fkey"
            columns: ["customer_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "bookings_service_id_fkey"
            columns: ["service_id"]
            isOneToOne: false
            referencedRelation: "services"
            referencedColumns: ["id"]
          }
        ]
      }
      cleaners: {
        Row: {
          id: string
          name: string
          contact_info: string | null
          bio: string | null
          active: boolean
          created_at: string
        }
        Insert: {
          id?: string
          name: string
          contact_info?: string | null
          bio?: string | null
          active?: boolean
          created_at?: string
        }
        Update: {
          id?: string
          name?: string
          contact_info?: string | null
          bio?: string | null
          active?: boolean
          created_at?: string
        }
        Relationships: []
      }
      profiles: {
        Row: {
          id: string
          first_name: string | null
          last_name: string | null
          email: string
          role: 'CUSTOMER' | 'CLEANER' | 'ADMIN'
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          first_name?: string | null
          last_name?: string | null
          email: string
          role?: 'CUSTOMER' | 'CLEANER' | 'ADMIN'
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          first_name?: string | null
          last_name?: string | null
          email?: string
          role?: 'CUSTOMER' | 'CLEANER' | 'ADMIN'
          created_at?: string
          updated_at?: string
        }
        Relationships: []
      }
      services: {
        Row: {
          id: string
          name: string
          slug: string
          description: string | null
          base_fee: number
          active: boolean
          created_at: string
        }
        Insert: {
          id?: string
          name: string
          slug: string
          description?: string | null
          base_fee: number
          active?: boolean
          created_at?: string
        }
        Update: {
          id?: string
          name?: string
          slug?: string
          description?: string | null
          base_fee?: number
          active?: boolean
          created_at?: string
        }
        Relationships: []
      }
      suburbs: {
        Row: {
          id: string
          name: string
          slug: string
          postcode: string
          region_id: string
          delivery_fee: number
          price_adjustment_pct: number
          active: boolean
          created_at: string
        }
        Insert: {
          id?: string
          name: string
          slug: string
          postcode: string
          region_id: string
          delivery_fee: number
          price_adjustment_pct?: number
          active?: boolean
          created_at?: string
        }
        Update: {
          id?: string
          name?: string
          slug?: string
          postcode?: string
          region_id?: string
          delivery_fee?: number
          price_adjustment_pct?: number
          active?: boolean
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "suburbs_region_id_fkey"
            columns: ["region_id"]
            isOneToOne: false
            referencedRelation: "regions"
            referencedColumns: ["id"]
          }
        ]
      }
      regions: {
        Row: {
          id: string
          name: string
          state: string
          active: boolean
          created_at: string
        }
        Insert: {
          id?: string
          name: string
          state: string
          active?: boolean
          created_at?: string
        }
        Update: {
          id?: string
          name?: string
          state?: string
          active?: boolean
          created_at?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never
`;

fs.writeFileSync(databaseTypesPath, updatedTypes);
console.log('âœ… Updated database types');
console.log('\nðŸŽ‰ Database types updated successfully!');
console.log('\nðŸ“‹ Next steps:');
console.log('1. Run: .\\fix-api-errors-simple.ps1');
console.log('2. Run: npx supabase db push');
console.log('3. Restart your dev server: npm run dev');
console.log('4. Test the APIs again');
